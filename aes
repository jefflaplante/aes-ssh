#! /bin/bash

MODE="e"
RSA_KEY=""
AES_KEY_ENC=""
FILE_IN=""
FILE_OUT=""
ARCHIVE=0
VERBOSE=0
QUIET=0

function usage() { 
  cat <<- "EOF"
    Usage: $0 -d [ -p RSA_KEY|AES_KEY ] [ -f FILE_TO_(EN|DE)CRYPT ]
  
      -h  Display usage information
      -d  Decrypt mode. Encrypt mode is default. Specify -d to decyrpt files.
      -p <RSA private or public key>  Specify a RSA key for en|decryting AES key
      -f <file>  Specify the file to en|decrypt
      -a <aes_key>  Specify the encrypted AES key to use when decrypting a file
      -o <output_file>  Specify the filename to save the decrypted file as
      -z  tar.gz encrypted AES key and file together
      -v  Verbose output
      -q  Be quiet
EOF

  exit 0
}

function check_pkcs8() {
  if [ -f "$1" ]; then
    grep -q -e "^-----BEGIN PUBLIC KEY-----$" $1
    if [ ! $? -eq 0 ]; then
      [ $VERBOSE -eq 1 ] && echo "Public key is not pkcs8 format" >&2
      return 1
    fi
  else
    exit 3
  fi
  return 0
}

function check_pvt_key_pem() {
  if [ -f "$1" ]; then
    grep -q -e "^-----BEGIN RSA PRIVATE KEY-----$" $1
    if [ ! $? -eq 0 ]; then
      [ $VERBOSE -eq 1 ] && echo "Private key is not in RSA PEM format" >&2
      return 1
    fi
  else
    exit 3
  fi
  return 0
}

function convert_pkcs8() {
  local RSA_PUB_KEY=$1
  local RSA_PUB_KEY_PKCS8="${RSA_PUB_KEY%.pub}.pub8"
  ssh-keygen -e -f $RSA_PUB_KEY -m PKCS8 > $RSA_PUB_KEY_PKCS8
  if [ $? -eq 0 ]; then 
    [ $VERBOSE -eq 1 ] && echo "Successfully converted public key to PKCS8 format" >&2
  else
    echo "Error converting public key to PKCS8 format"
    exit 77
  fi
  echo $RSA_PUB_KEY_PKCS8
}

function convert_pvt_openssh_to_pem() {
  local PRIV_KEY=$1
  local PEM="$PRIV_KEY.pem"
  local OUTPUT=""

  cp $PRIV_KEY $PEM

  [ $VERBOSE -eq 1 ] && echo "Private key: $PRIV_KEY PEM: $PEM" >&2

  OUTPUT=$(ssh-keygen -p -N "" -m pem -f $PEM)
  if [ $? -eq 0 ]; then
    [ $VERBOSE -eq 1 ] && echo "Successfully converted openssh private key to PEM format" >&2
  else
    echo "Error converting private openssh key to PEM format. Convert manually." >&2
    exit 78
  fi
}

function does_file_exist() {
  if [ -z "$1" ]; then
    echo "Empty string passed as a file reference." >&2
    exit 4
  fi

  if [ ! -f "$1" ]; then
    echo "File does not exist: $1" >&2
    exit 3
  fi
}

function encrypt() {
  local RSA_PUB_KEY=$1
  local FILE_TO_ENCRYPT=$2
  local ARCH=$3
  
  local SUFFIX="enc"
  local UUID=$(uuidgen)
  local AES_KEY="key.$UUID"
  local AES_KEY_ENC="$AES_KEY.$SUFFIX"
  local FILE_ENCRYPTED="$FILE_TO_ENCRYPT.$UUID.$SUFFIX"

  local RM_TMP_PKCS8=0

  does_file_exist $RSA_PUB_KEY

  check_pkcs8 $RSA_PUB_KEY
  if [ $? -eq 1 ]; then
    RSA_PUB_KEY=$(convert_pkcs8 $RSA_PUB_KEY)
    RM_TMP_PKCS8=1
  fi

  does_file_exist $FILE_TO_ENCRYPT
  
  # Create AES key
  openssl rand -out $AES_KEY 32

  # Encrypt file with temporary key
  openssl aes-256-cbc -in $FILE_TO_ENCRYPT -out $FILE_ENCRYPTED -pass file:$AES_KEY -pbkdf2
  if [ $? -eq 0 ]; then 
    [ $VERBOSE -eq 1 ] && echo "Encrypted file with $AES_KEY" >&2
  else 
    echo "Error encrypting file" >&2
    rm $AES_KEY
    exit 86
  fi

  # Encrypt AES key with ssh public key
  openssl pkeyutl -encrypt -pubin -inkey $RSA_PUB_KEY -in $AES_KEY -out $AES_KEY_ENC
  if [ $? -eq 0 ]; then 
    [ $VERBOSE -eq 1 ] && echo "Encrypted $AES_KEY_ENC with $1" >&2
  else 
    echo "Error encrypting $AES_KEY" >&2
    rm $AES_KEY
    exit 64 
  fi

  # Remove temp key
  rm $AES_KEY

  # Remove temp PKCS8 public key
  [ $RM_TMP_PKCS8 -eq 1 ] && rm $RSA_PUB_KEY

  # Should we tar it up?
  if [ $ARCH -eq 1 ]; then
    FILE_ARCH="$UUID.tar.gz"
    tar zcf $FILE_ARCH $AES_KEY_ENC $FILE_ENCRYPTED && rm $AES_KEY_ENC $FILE_ENCRYPTED 
    [ $QUIET -eq 0 ] && echo "Public Key Used: $RSA_PUB_KEY"
    [ $QUIET -eq 0 ] && echo "Encrypted key and file archive: $FILE_ARCH"
  else
    [ $QUIET -eq 0 ] && echo "Public Key Used: $RSA_PUB_KEY"
    [ $QUIET -eq 0 ] && echo "Encrypted Key:   $AES_KEY_ENC"
    [ $QUIET -eq 0 ] && echo "Encrypted File:  $FILE_ENCRYPTED"
  fi
}

function decrypt() {
  local RSA_PVT_KEY=$1
  local KEY_ENC=$2
  local FILE_ENC=$3
  local FILE_OUT=$4

  local RM_TMP_PVT_KEY=0

  # If FILE_OUT is not set...
  if [ -z $FILE_OUT ]; then
    # ..and FILE_ENC has a suffix of .enc
    echo "$FILE_ENC" | grep -q -e ".enc"
    if [ $? -eq 0 ]; then
      # set FILE_OUT to FILE_ENC without the .enc suffix
      FILE_OUT=${FILE_ENC%.enc}
    else
      FILE_OUT="out"
    fi
  fi

  check_pvt_key_pem $RSA_PVT_KEY
  if [ $? -eq 1 ]; then
    [ $VERBOSE -eq 1 ] && echo "Converting private key to RSA PEM format" >&2
    convert_pvt_openssh_to_pem $RSA_PVT_KEY
    RSA_PVT_KEY="$RSA_PVT_KEY.pem"
    RM_TMP_PVT_KEY=1
  fi

  [ $VERBOSE -eq 1 ] && echo "Decrypt AES key" >&2
  openssl pkeyutl -decrypt -inkey $RSA_PVT_KEY -in $KEY_ENC -out .tmp_key

  [ $VERBOSE -eq 1 ] && echo "Decrypt ciphertext with AES key" >&2
  openssl aes-256-cbc -d -in $FILE_ENC -out $FILE_OUT -pass file:.tmp_key -pbkdf2
  rm .tmp_key
  [ $RM_TMP_PVT_KEY -eq 1 ] && rm $RSA_PVT_KEY
}

function main() {
  # Check options for encryption before calling encrypt
  if [ "$MODE" = "e" ]; then
    if [ ! -z "$RSA_KEY" ]; then
      if [ ! -f "$RSA_KEY" ]; then
        echo "$RSA_KEY was not found"
        exit 7
      fi
    else
      echo "Please specify a RSA public key to use with the [-p RSA_KEY] option" >&2
      exit 9
    fi

    if [ ! -z "$FILE_IN" ]; then
      if [ ! -f "$FILE_IN" ]; then
        echo "$FILE_IN was not found"
        exit 11
      fi
    else
      echo "Please specify a file to encrypt with the [-f FILE] option" >&2
      exit 15
    fi

    encrypt $RSA_KEY $FILE_IN $ARCHIVE
  fi

  # Check options for decryption before calling decrypt
  if [ "$MODE" = "d" ]; then
    if [ ! -z "$RSA_KEY" ]; then
      if [ ! -f "$RSA_KEY" ]; then
        echo "$RSA_KEY was not found"
        exit 7
      fi
    else
      echo "Please specify a RSA private key to use with the [-p RSA_KEY] option" >&2
      exit 9
    fi

    if [ ! -z "$FILE_IN" ]; then
      if [ ! -f "$FILE_IN" ]; then
        echo "$FILE_IN was not found"
        exit 11
      fi
    else
      echo "Please specify a file to decrypt with the [-f FILE] option" >&2
      exit 15
    fi

    if [ ! -z "$AES_KEY_ENC" ]; then
      if [ ! -f "$AES_KEY_ENC" ]; then
        echo "$AES_KEY_ENC was not found"
        exit 11
      fi
    else
      echo "Please specify an ecrypted AES key to use with the [-a AES_KEY] option" >&2
      exit 17
    fi
    
    decrypt $RSA_KEY $AES_KEY_ENC $FILE_IN $FILE_OUT
  fi
}

while getopts "hdp:f:o:a:zvq" options; do
  case "${options}" in
    h)
      usage
      ;;
    d)
      MODE="d"
      ;;
    p)
      RSA_KEY=${OPTARG}
      ;;
    f)
      FILE_IN=${OPTARG}
      ;;
    o)
      FILE_OUT=${OPTARG}
      ;;
    a)
      AES_KEY_ENC=${OPTARG}
      ;;
    z)
      ARCHIVE=1
      ;;
    v)
      VERBOSE=1
      ;;
    q)
      QUIET=1
      ;;
    :)
      echo "Error: -${OPTARG} requires an argument" >&2
      exit 1
      ;;
    *)
      exit 99
      ;;
  esac
done

main
exit 0
